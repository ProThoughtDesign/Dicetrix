# DICETRIX GAME - COMPREHENSIVE PROJECT DOCUMENTATION
## Complete AI Development Continuation Guide

### PROJECT OVERVIEW

**Dicetrix** is a revolutionary gravity-matching puzzle game that combines falling Tetromino pieces with advanced dice-based match detection and clearing mechanics. Built for Reddit using Phaser.js and the Devvit platform, it creates an entirely new gaming experience by merging classic falling-block mechanics with innovative dice-matching gameplay.

**Current Status**: Dicetrix is a complete, fully functional gravity-matching puzzle game with professional-grade features including real-time responsive design, advanced match detection with size-based effects, event-driven cascade chain systems, comprehensive input controls for both desktop and mobile devices, and smooth animations with autonomous dice movement managed by the GameStateController and MovementManager.

### CORE GAME MECHANICS

#### Revolutionary Hybrid Gameplay System

**Falling Tetromino Pieces + Advanced Match Detection**
- Control 8 different Tetromino shapes: I, O, T, L, J, S, Z, plus a custom PLUS shape
- Each piece is composed of SimpleDie objects showing random numbers (4-20 sides depending on difficulty)
- When pieces lock into place, an advanced flood-fill algorithm detects groups of 3+ adjacent dice with matching numbers
- Event-driven cascade system creates satisfying chain reactions with exponential score multipliers

**Dynamic Dice System with Size-Based Effects**
- **Regular Dice**: Show numbers 1-20 based on game mode difficulty (Easy: 4-6 sides, Expert: 4-20 sides)
- **Wild Dice (*)**: Match with any number, created by clearing 5+ dice groups
- **Black Dice (X)**: Remove active color boosters when matched (Hard/Expert modes only)
- **Size Effects**: Different match sizes trigger unique clearing effects:
  - **3 Dice**: Standard clear (removes matched dice only)
  - **4 Dice**: Line clear (removes entire row or column)
  - **5 Dice**: Wild spawn (creates a Wild die at match center)
  - **7 Dice**: Area clear (removes 7x7 area around match)
  - **9+ Dice**: Grid clear (removes all dice from playing field)
- **Ultimate Combo**: 3+ adjacent Wild dice upgrade all grid dice to maximum values with 5x score multiplier

#### Autonomous Dice Movement System

**SimpleDie Architecture**: Each die is a self-contained Phaser.GameObjects.Container that manages its own rendering, movement, and lifecycle through proper object-oriented design.

**MovementManager**: Tracks dice movement with explicit registration/unregistration and emits events when all movement completes.

**Event-Driven Flow**: GameStateController uses Phaser's EventEmitter to coordinate piece locking, autonomous dice falling, match processing, and cascade chains.

**Natural Autonomy**: Dice become autonomous after piece locking and handle their own falling behavior through Phaser's preUpdate() system.

### FINITE STATE MACHINE ARCHITECTURE

#### GameStateController Phases

The game uses a sophisticated finite state machine with the following phases:

1. **SPAWN**: Waiting for piece to be spawned
2. **DROP_CONTROL**: Piece is falling and player can control it
3. **LOCK**: Piece is being locked into the grid
4. **MATCH**: Checking for matches
5. **CLEAR_MATCH**: Clearing matched dice
6. **CASCADE**: Applying gravity after matches

**Phase Flow**: SPAWN → DROP_CONTROL → LOCK → MATCH → CLEAR_MATCH → CASCADE
- The CASCADE → MATCH loop continues until no more matches are found
- Then returns to SPAWN for next piece

#### Key State Management Features

- **Input Control**: Input is only enabled during DROP_CONTROL phase
- **Event-Driven Transitions**: Each phase transition emits events for coordination
- **Processing Prevention**: Prevents multiple simultaneous phase processing
- **Autonomous Integration**: Coordinates with autonomous dice movement system

### TECHNICAL ARCHITECTURE

#### Framework Stack

**Phaser.js Game Engine**
- Phaser.js 3.88.2 with WebGL rendering and AUTO scaling
- TypeScript with strict compilation and project references
- Scene Management: Boot → Preloader → StartMenu → Game
- Game Configuration: 1024x768 base resolution with RESIZE scaling mode

**Devvit Platform Integration**
- Reddit app hosting with webview integration
- Server-side API endpoints starting with `/api/`
- Client-server communication via standard fetch calls
- Redis data persistence through Devvit SDK

#### Project Structure

```
src/
├── client/           # Frontend Phaser.js game
│   ├── game/        # Core game logic
│   │   ├── audio/   # Audio management (AudioManager, AudioEvents)
│   │   ├── controllers/ # GameStateController with finite state machine
│   │   ├── input/   # Input handling (InputManager, TouchControls)
│   │   ├── managers/ # MovementManager for autonomous dice tracking
│   │   ├── models/  # Game entities (SimpleDie, Piece, Grid, GameStateManager)
│   │   ├── scenes/  # Phaser scenes (StartMenu, Game, GameOver, etc.)
│   │   ├── systems/ # Game systems (ProgressionSystem, PerformanceMonitor)
│   │   ├── ui/      # Responsive UI system (ResponsiveUISystem, DisplayModeDetector)
│   │   └── visual/  # Visual effects and rendering (DiceRenderer, ParticleEffects)
├── server/          # Backend API for Reddit integration
└── shared/          # Shared types and configurations
    ├── types/       # TypeScript type definitions
    └── config/      # Game mode configurations
```

### CORE CLASSES AND SYSTEMS

#### SimpleDie Class (Autonomous GameObject)

**File**: `src/client/game/models/SimpleDie.ts`

**Key Features**:
- Extends `Phaser.GameObjects.Container` for native Phaser integration
- Self-managed rendering with procedural graphics generation
- Autonomous movement through `preUpdate()` method
- Event emission for movement completion
- Responsive scaling and typography

**Properties**:
```typescript
public sides: number;           // 4-20 based on game mode
public number: number;          // Rolled value 1-sides
public color: DieColor;         // Visual color
public isWild: boolean;         // Matches any number
public isBlack: boolean;        // Removes boosters
private targetX/Y: number;      // Movement targets
private isMoving: boolean;      // Movement state
private cellSize: number;       // Responsive sizing
```

**Key Methods**:
- `preUpdate()`: Phaser's built-in update called every frame for autonomous movement
- `moveToPosition(x, y)`: Initiates smooth movement to target
- `setMovementManager(manager)`: Registers with movement tracking system
- `render()`: Complete visual rendering with responsive scaling
- `setGridPosition()`: Positions die based on grid coordinates with offsets

#### GameStateController (Finite State Machine)

**File**: `src/client/game/controllers/GameStateController.ts`

**Finite State Machine Implementation**:
```typescript
export enum GamePhase {
  SPAWN = 'spawn',
  DROP_CONTROL = 'drop_control', 
  LOCK = 'lock',
  MATCH = 'match',
  CLEAR_MATCH = 'clear_match',
  CASCADE = 'cascade'
}
```

**Key Methods**:
- `update()`: Called every frame to process current phase
- `transitionToPhase(newPhase)`: Handles phase transitions with event emission
- `lockCurrentPiece()`: Triggers transition from DROP_CONTROL to LOCK
- `updateLockPhase()`: Places dice in grid and transitions to MATCH
- `updateMatchPhase()`: Processes matches asynchronously
- `updateCascadePhase()`: Applies gravity and waits for movement completion

**Event System**:
- Emits `inputEnabled`/`inputDisabled` for input state control
- Emits `spawnNextPiece` when ready for new piece
- Emits `phaseChanged` for debugging and coordination

#### MovementManager (Autonomous Dice Tracking)

**File**: `src/client/game/managers/MovementManager.ts`

**Core Functionality**:
- Explicit registration/unregistration of moving dice
- Event emission when all movement completes
- Emergency cleanup for hanging movements
- Debug tracking of moving dice count

**Key Methods**:
```typescript
registerMovingDie(die: SimpleDie): void     // Add die to tracking
unregisterMovingDie(die: SimpleDie): void   // Remove die from tracking
hasMovingDice(): boolean                    // Check if any dice moving
forceStopAllMovements(): void               // Emergency cleanup
```

**Event Flow**:
1. Die calls `moveToPosition()` and registers with manager
2. Die moves autonomously via `preUpdate()`
3. Die emits `moveComplete` when reaching target
4. Manager unregisters die and emits `allMovementComplete` when all done

#### Grid System (10x20 Playing Field)

**File**: `src/client/game/models/Grid.ts`

**Core Properties**:
```typescript
public cells: (SimpleDie | null)[][];       // 10x20 grid of dice
public readonly width: number = 10;         // Grid width
public readonly height: number = 20;        // Grid height
private cellSize: number;                   // Responsive cell size
private offsetX/Y: number;                  // Screen positioning
```

**Key Methods**:
- `isEmpty(x, y)`: Check if grid position is empty
- `getDie(x, y)` / `setDie(x, y, die)`: Get/set dice at positions
- `checkCollision(piece, x, y)`: Collision detection for piece movement
- `addPiece(piece)`: Break piece into individual dice and place in grid
- `detectMatches()`: Flood-fill algorithm for match detection
- `applyGravityWithAnimation()`: Smooth gravity with Phaser tweens
- `gridToScreen(x, y)`: Convert grid coordinates to screen coordinates

#### Piece System (Tetromino Shapes)

**File**: `src/client/game/models/Piece.ts`

**Matrix System**:
- Fixed-size square matrix containing dice (null for empty cells)
- Separate shape matrix for collision detection
- Rotation via matrix transformation with wall kicks

**Key Properties**:
```typescript
public dice: SimpleDie[];                   // Array of dice in piece
public shape: TetrominoShape;               // I, O, T, L, J, S, Z, PLUS
public rotation: number;                    // 0, 90, 180, 270 degrees
public gridX/Y: number;                     // Grid position
private diceMatrix: (SimpleDie | null)[][]; // Dice placement matrix
private shapeMatrix: number[][];            // Shape collision matrix
```

**Movement Methods**:
- `moveLeft()` / `moveRight()` / `moveDown()`: Basic movement with collision
- `rotatePiece()`: 90-degree clockwise rotation with wall kicks
- `canMoveTo(x, y)`: Collision detection
- `getDicePositions()`: Get all dice positions in grid coordinates

#### Match Processing System

**File**: `src/client/game/models/MatchProcessor.ts`

**Advanced Match Detection**:
- Flood-fill algorithm detects connected groups of 3+ dice
- Wild dice (*) match with any number
- Size-based effects trigger automatically
- Ultimate Combo detection for 3+ adjacent wild dice

**Size Effects Processing**:
```typescript
// 3 dice: Standard clear
// 4 dice: Line clear (row or column)
// 5 dice: Wild spawn + standard clear
// 7 dice: 7x7 area clear
// 9+ dice: Full grid clear
```

**Key Methods**:
- `processMatches()`: Main match processing with async effects
- `applySizeEffect()`: Execute size-based clearing effects
- `spawnWildDie()`: Create wild dice for 5-dice matches
- `upgradeAllDiceToMax()`: Ultimate Combo effect

### RESPONSIVE UI SYSTEM

#### DisplayModeDetector

**File**: `src/client/game/ui/DisplayModeDetector.ts`

**Display Mode Classification**:
- **Mobile**: ≤1080px in either dimension
- **Desktop**: 1081-1600px in both dimensions  
- **Fullscreen**: >1600px in either dimension

**Dynamic Adaptation**:
- Real-time screen monitoring with debouncing
- Event emission on mode changes
- Cross-browser fullscreen event handling

#### ResponsiveUISystem

**File**: `src/client/game/ui/ResponsiveUISystem.ts`

**Coordinated Layout Management**:
- DisplayModeDetector for screen classification
- ScalingCalculator for dynamic cell sizing
- LayoutManager for positioning calculations
- UIZoneManager for screen real estate allocation

**Cell Size Scaling**:
- Mobile: 24x24px cells
- Desktop: 32x32px cells
- Fullscreen: Dynamic calculation up to 128x128px maximum

**Positioning Strategy**:
- Mobile: Grid positioned 10px from left for thumb accessibility
- Desktop/Fullscreen: Grid centered both horizontally and vertically

### INPUT SYSTEM

#### InputManager

**File**: `src/client/game/input/InputManager.ts`

**Dual Input Support**:
- Keyboard controls with auto-repeat (150ms delay, 50ms repeat rate)
- Touch gesture recognition with swipe detection (50px threshold)
- Input validation with 50ms cooldown to prevent spam

**Control Mapping**:
```typescript
// Desktop Controls
Left/Right Arrows: Move piece horizontally
Down Arrow: Soft drop (accelerate downward)
Up Arrow: Rotate piece clockwise
Space Bar: Hard drop (instant drop and lock)

// Mobile Touch Controls
Swipe Left/Right: Move piece horizontally
Swipe Down: Soft drop piece
Tap or Swipe Up: Rotate piece
Double Tap: Hard drop piece
```

**Advanced Features**:
- Gesture recognition with angle calculation
- Double-tap detection with timeout handling
- Auto-repeat for held movement keys
- Touch control visual feedback

### GAME MODES AND CONFIGURATION

#### Game Mode System

**File**: `src/shared/config/game-modes.ts`

**Five Difficulty Modes**:

1. **Easy Mode** (Default):
   - Dice: 4-6 sides, Pieces: I,O,L,J,T only
   - Fall Speed: 1000ms, Score Multiplier: 1.0x
   - Wild Dice: 5% chance, No black dice

2. **Medium Mode**:
   - Dice: 4-10 sides, Pieces: All basic shapes including S,Z
   - Fall Speed: 800ms, Score Multiplier: 1.2x
   - Wild Dice: 4% chance, No black dice

3. **Hard Mode**:
   - Dice: 4-12 sides, Pieces: All shapes including PLUS
   - Fall Speed: 600ms, Score Multiplier: 1.5x
   - Wild Dice: 3% chance, Black Dice: 1%

4. **Expert Mode**:
   - Dice: 4-20 sides, Pieces: All 8 piece types
   - Fall Speed: 400ms, Score Multiplier: 2.0x
   - Wild Dice: 2% chance, Black Dice: 2%

5. **Zen Mode**:
   - Dice: 4-10 sides, No game over condition
   - Fall Speed: 1200ms, Score Multiplier: 0.8x
   - Wild Dice: 8% chance (enhanced), No black dice

#### Piece Shape Definitions

**Standard Tetromino Shapes**:
```typescript
I: [[1, 1, 1, 1]]                    // Line piece
O: [[1, 1], [1, 1]]                  // Square piece
T: [[0, 1, 0], [1, 1, 1]]           // T piece
L: [[1, 0, 0], [1, 1, 1]]           // L piece
J: [[0, 0, 1], [1, 1, 1]]           // J piece
S: [[0, 1, 1], [1, 1, 0]]           // S piece
Z: [[1, 1, 0], [0, 1, 1]]           // Z piece
PLUS: [[0, 1, 0], [1, 1, 1], [0, 1, 0]] // Custom plus shape
```

### SCENE MANAGEMENT

#### Scene Flow

**Boot Scene**: Quick initialization and asset loading
**Preloader Scene**: Loading screen with progress indication
**StartMenu Scene**: Clean main menu with "DICETRIX" title and "START GAME" button
**Game Scene**: Full gameplay with responsive 10x20 grid and adaptive UI

#### Game Scene Architecture

**File**: `src/client/game/scenes/Game.ts`

**Core Update Loop**:
```typescript
public override update(time: number, delta: number): void {
  // Update finite state machine
  if (this.gameStateController) {
    this.gameStateController.update();
  }
  
  // Update input (only if enabled)
  if (this.inputManager && this.gameStateController?.isInputEnabled()) {
    this.inputManager.update(delta);
  }
  
  // Handle gravity (only if input enabled)
  if (this.gameStateController?.isInputEnabled()) {
    this.updateGravity(time);
  }
}
```

**Gravity System**:
- Automatic piece falling every 1000ms (Easy mode)
- Individual die collision detection
- Piece breaking when some dice collide but others don't
- Smooth visual movement with Phaser tweens

### VISUAL SYSTEM

#### SimpleDie Rendering

**Procedural Graphics**:
- Clean blue squares (0x4dabf7) with dynamic gold text (0xffd700)
- Responsive typography with dynamic font scaling (16px-48px)
- Black stroke for optimal readability (2-4px thickness)
- Special rendering for Wild (*) and Black (X) dice

**Color System**:
```typescript
// Regular dice: Blue fill with darker blue stroke
fillColor: 0x4dabf7, strokeColor: 0x0066cc

// Wild dice: White fill with gold stroke  
fillColor: 0xffffff, strokeColor: 0xffd700

// Black dice: Dark fill with red stroke
fillColor: 0x2a2a2a, strokeColor: 0xff0000
```

#### Animation System

**Smooth Movement**:
- Autonomous dice movement via preUpdate() with configurable speed
- Bounce animations for falling dice using Phaser tweens
- Match clearing effects with visual feedback
- Cascade chain animations with increasing intensity

### AUDIO SYSTEM

#### AudioManager Integration

**File**: `src/client/game/audio/AudioManager.ts`

**Comprehensive Sound Effects**:
- Menu navigation sounds (hover, select, exit)
- Piece movement and rotation feedback
- Match clearing effects based on size
- Wild die spawn and Ultimate Combo sounds
- Black die activation audio
- Cascade chain progression sounds

**Robust Error Handling**:
- Graceful degradation when audio fails
- Try-catch blocks around all audio calls
- Console warnings for debugging without breaking gameplay

### DEVELOPMENT WORKFLOW

#### Build System

**Vite Configuration**:
- Client builds to `dist/client` with HTML entry point
- Server builds to `dist/server` as CommonJS module
- TypeScript project references for modular compilation
- Hot reloading during development

**Key Commands**:
```bash
npm run dev          # Development with live reloading
npm run build        # Production build (client + server)
npm run deploy       # Deploy to Reddit
npm run launch       # Publish for review
npm run check        # Code quality checks
```

#### Testing Strategy

**Comprehensive Test Suite**:
- Match detection validation tests
- Scoring system verification
- Cascade loop prevention tests
- API integration testing
- Performance benchmarks

### CURRENT IMPLEMENTATION STATUS

#### Completed Systems

✅ **Core Gameplay**: Complete Tetromino control with 8 shapes and collision detection
✅ **Match Detection**: Advanced flood-fill algorithm with size-based effects
✅ **Autonomous Dice System**: Self-managing SimpleDie objects with MovementManager tracking
✅ **Finite State Machine**: GameStateController with proper phase management
✅ **Responsive Design**: Real-time adaptation across mobile/desktop/fullscreen
✅ **Input System**: Keyboard and touch controls with gesture recognition
✅ **Visual System**: Procedural dice rendering with responsive scaling
✅ **Audio System**: Comprehensive sound effects with error handling
✅ **Scene Management**: Complete flow from Boot to Game with proper transitions

#### Advanced Features Ready for Activation

🔧 **Color Booster System**: Seven unique temporary power-ups (BoosterManager implemented)
🔧 **Progression System**: Level advancement and score tracking
🔧 **Achievement Framework**: Infrastructure for goals and rewards
🔧 **Performance Monitoring**: Built-in optimization tracking

### GAME FLOW DOCUMENTATION

#### Complete Gameplay Loop

1. **Piece Spawning**: PieceFactory creates Tetromino with SimpleDie objects
2. **Player Control**: InputManager handles movement/rotation during DROP_CONTROL phase
3. **Gravity System**: Automatic falling with individual die collision detection
4. **Piece Locking**: GameStateController transitions to LOCK phase
5. **Autonomous Dice**: Individual dice become autonomous and register with MovementManager
6. **Match Detection**: MatchProcessor uses flood-fill to find 3+ adjacent matching dice
7. **Size Effects**: Different match sizes trigger unique clearing effects
8. **Cascade Processing**: Remaining dice fall autonomously, creating potential new matches
9. **Score Calculation**: ScoreManager applies base score, chain multipliers, and booster effects
10. **Next Piece**: Return to SPAWN phase for continuous gameplay

#### Event-Driven Architecture

**GameStateController Events**:
- `inputEnabled` / `inputDisabled`: Control input availability
- `spawnNextPiece`: Request new piece generation
- `phaseChanged`: Debug and coordination information

**MovementManager Events**:
- `movementStarted`: First die begins moving
- `allMovementComplete`: All dice finished moving

**SimpleDie Events**:
- `moveComplete`: Individual die reached target position

### DEBUGGING AND MONITORING

#### Comprehensive Logging

**AI Logger Integration**:
- Decision tracking for game state changes
- Performance monitoring for optimization
- Error tracking with context information

**Debug Features**:
- Display mode testing buttons (M/D/F)
- Real-time phase monitoring
- Movement tracking with dice counts
- Grid state visualization

#### Performance Optimization

**Efficient Systems**:
- Object pooling for dice creation
- Event-driven updates to minimize processing
- Responsive design with throttled layout updates
- Autonomous movement reduces central coordination overhead

### DEPLOYMENT CONFIGURATION

#### Devvit Integration

**File**: `devvit.json`
```json
{
  "name": "dice-trix",
  "post": {
    "dir": "dist/client",
    "entrypoints": { "default": { "entry": "index.html" } }
  },
  "server": {
    "dir": "dist/server", 
    "entry": "index.cjs"
  }
}
```

**Reddit Integration**:
- Moderator menu for post creation
- App installation triggers
- Subreddit-specific deployment (dice_trix_dev)

### CONTINUATION INSTRUCTIONS FOR AI DEVELOPMENT

#### Understanding the Current Architecture

1. **Finite State Machine**: The GameStateController is the heart of the game flow. All game logic flows through its phase system.

2. **Autonomous Design**: SimpleDie objects manage themselves through Phaser's built-in systems. This eliminates complex coordination code.

3. **Event-Driven Communication**: Systems communicate through Phaser's EventEmitter rather than direct method calls.

4. **Responsive by Design**: The ResponsiveUISystem handles all screen adaptation automatically.

#### Key Development Patterns

**Adding New Features**:
1. Extend the finite state machine if new game phases are needed
2. Use SimpleDie's autonomous pattern for new game objects
3. Integrate with MovementManager for any moving elements
4. Follow the event-driven communication pattern

**Modifying Game Logic**:
1. Game flow changes go through GameStateController phases
2. Match detection modifications go in MatchProcessor
3. Visual changes go in SimpleDie's render() method
4. Input changes go in InputManager with proper event emission

**Performance Considerations**:
1. Leverage Phaser's built-in update systems (preUpdate, update)
2. Use event-driven updates rather than polling
3. Maintain the autonomous object pattern to reduce coordination overhead

#### Critical Files for Continuation

**Core Game Logic**:
- `src/client/game/controllers/GameStateController.ts` - Finite state machine
- `src/client/game/models/SimpleDie.ts` - Autonomous dice objects
- `src/client/game/managers/MovementManager.ts` - Movement tracking
- `src/client/game/scenes/Game.ts` - Main game scene

**System Architecture**:
- `src/client/game/models/Grid.ts` - Playing field management
- `src/client/game/models/MatchProcessor.ts` - Match detection and processing
- `src/client/game/ui/ResponsiveUISystem.ts` - Adaptive UI coordination

**Configuration**:
- `src/shared/config/game-modes.ts` - Game mode definitions
- `src/shared/types/game.ts` - Type definitions

This documentation provides complete context for continuing development of the Dicetrix game. The architecture is designed for extensibility while maintaining clean separation of concerns and autonomous object behavior.
